import yfinance as yf
import streamlit as st
import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt
import random


st.write("""
### Inspirational Recommender with Multi Armed Bandit

""")
st.write("""

""")

# ticksymbol = 'GOOGL'
# tickerData = yf.Ticker(ticksymbol)
# tickerDf = tickerData.history(period='1d', start='2020-1-10', end='2020-5-31')
# chart = st.line_chart(last_rows)

# for i in range(1, 101):
#     new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)
#     # status_text.text("%i%% Complete" % i)
#     chart.add_rows(new_rows)
#     # progress_bar.progress(i)
#     last_rows = new_rows
#     time.sleep(0.05)

def user_simulator(product_prices, tra_rec_index, ins_rec_index, scenario, ins_level_rec):
    """
    product_prices: a list of prices of 10 recommended products
    tra_rec_index: a list of indices for the traditional recommended products
    ins_rec_index: a list of indices for the inspirational recommended products
    scenario: '1': more spontaneous,
              '2': more planned,
    ins_level_rec: inspirational factor the recommender used for generating the 10 rec products
    return the index of purchased items and the total order price
    """
    sort_prod_prices = product_prices.copy().sort(reverse=True)
    if tra_rec_index == [] or ins_rec_index == []: # if either is empty, i.e., the two extreme cases
        if np.random.rand() < 0.1:
            return_index = random.randint(0,9)
        else:
            return_index = []
    else:
        if scenario == '1': # scenario "spontaneous"
            if ins_level_rec == 0.4: # assume most users prefer 0.4 as inspiratioanl level
                return_index = random.sample(tra_rec_index, 1) + random.sample(ins_rec_index, 1)
            else:
                if np.random.rand() < 0.5:
                    return_index = random.sample(tra_rec_index, 1) + random.sample(ins_rec_index, 1)
                else:
                    return_index = random.sample(tra_rec_index, 1)
        else: # scenario "planned"
            if ins_level_rec == 0.1: # assume users prefer 0.1 as inspiratioanl level
                return_index = random.sample(tra_rec_index, 1)
            else:
                if np.random.rand() < 0.5:
                    return_index = random.sample(tra_rec_index, 1)
                else:
                    return_index = []
        # calculate totoal order price            
        if len(return_index) == 0:
            return_order_price = 0
        else:
            return_order_price = sum([product_prices[p] for p in return_index])
        
        return return_index, return_order_price 
    





df1 = pd.DataFrame()
l = []
for i in range(1000):
    l.append(i)
    
df1['close'] = l

df2 = pd.DataFrame({'RPV_IF_1': [3],
                    'RPV_IF_2': [2],
                    'RPV_IF_3': [3.4],
                    'RPV_IF_4': [6],
                    'RPV_IF_5': [7]})
# df2['RPV_InsFactor_1'] = [3,2,3.4,6,7]
# mychart = st.bar_chart(df2)

labels = ['L1', 'L2', 'L3', 'L4', 'L5',\
          'L6', 'L7', 'L8', 'L9', 'L10']
RPV_ins_factors = [0 for i in range(10)]
x = np.arange(len(labels))  # the label locations
width = 0.35  # the width of the bars

# read simulated data
sim_df = pd.read_csv('./simulated_data.csv')


barChart = st.empty()
recPrices = st.empty()
traRecIndex = st.empty()
insRecIndex = st.empty()
purchasedIndex = st.empty()
orderPrice = st.empty()
for i in range(100-1):
    fig, ax = plt.subplots(figsize=(12,4))
    pic = ax.bar(x, RPV_ins_factors, width, color=('C1','C2','C3','C4','C5','C6','C7','C8','C9','C10'))
    RPV_ins_factors[sim_df.ins_factor.iloc[i] - 1] += sim_df.order_price.iloc[i]
    # Add some text for labels, title and custom x-axis tick labels, etc.
    ax.set_ylabel('Total Order Prices ($)')
    ax.set_xlabel('Inspirational Levels')
    ax.set_xticks(x)
    ax.set_xticklabels(labels)
    ax.legend()
    barChart.pyplot(fig)
    # Update the recommendation decision.
    recPrices.text('Recommended Product Prices: ' + '$' + str(sim_df.product_prices.iloc[i]) )
    traRecIndex.text('Traditional Recommended Product Index: ' + str(sim_df.tra_rec_index.iloc[i]))
    insRecIndex.text('Inspirational Recommended Product Index: ' + str(sim_df.ins_rec_index.iloc[i]))
    # Update user purchased items generated by the user simulator.
    # user_respond = user_simulator(product_prices=sim_df.product_prices.iloc[i], \
    #                             tra_rec_index=sim_df.tra_rec_index.iloc[i], \
    #                             ins_rec_index=sim_df.ins_rec_index.iloc[i], \
    #                             scenario='1',\
    #                             ins_level_rec=sim_df.ins_factor.iloc[i]/10)
    purchasedIndex.text(('The User Purchased Product Index: ' + str(random.randint(1,10))))
    orderPrice.text(('Total Order Price: ' + '$' + str(random.randint(1,100))))
    time.sleep(0.5)

# progress_bar = st.progress(0)
# status_text = st.empty()
# chart = st.line_chart(np.random.randn(10, 2))

# for i in range(100):
#     # Update progress bar.
#     progress_bar.progress(i + 1)

#     new_rows = np.random.randn(10, 2)

#     # Update status text.
#     status_text.text(
#         'The latest random number is: %s' % new_rows[-1, 1])

#     # Append data to the chart.
#     chart.add_rows(new_rows)

#     # Pretend we're doing some computation that takes time.
#     time.sleep(0.1)

# status_text.text('Done!')
# st.balloons()


st.empty()

# mychart = st.line_chart(df1['close'].iloc[0:1])
# for i in range(1000-1):
#     mychart.add_rows(df1['close'].iloc[i:i+1])
#     time.sleep(0.1)
s = 0
# if st.button('Say hello'):
#     s += 1
#     st.write('s = ', s)
